Autor :
  Manuel Couto Pintos

Maquina :
  Lenovo ThinkPad T480
  Nombre del SO	Microsoft Windows 10 Pro
  Procesador	Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz, 2112 Mhz, 4 procesadores principales, 8 procesadores lógicos
  Memoria física instalada (RAM)	16,0 GB

Introducción :
  En esta práctica se implementan 2 versiones (una terminal o quasiterminal y otra no terminal) de 3 algoritmos de ordenación
  a continuación se realizan mediciones de tiempo y se compara la complegidad tehorica a la obtenida de forma empírica


- isort

  (n)  |     ->     |  t(n)/n     | t(n)/n^1.3 |   t(n)/n^1.6  |
------------------------------------------------------------------
2000   | 4.6875e-05 | 2.34375e-08 | 2.3966e-09 | 2.4507177e-10 |
4000   | 0.00010937 | 2.73437e-08 | 2.2711e-09 | 1.8863491e-10 |
8000   | 0.00023437 | 2.92968e-08 | 1.9764e-09 | 1.3334210e-10 |
16000  | 0.00053125 | 3.32031e-08 | 1.8194e-09 | 9.9702711e-11 |
32000  | 0.00132812 | 4.15039e-08 | 1.8473e-09 | 8.2224073e-11 |
64000  | 0.00364062 | 5.68847e-08 | 2.0565e-09 | 7.4351201e-11 |
128000 | 0.00978125 | 7.64160e-08 | 2.2439e-09 | 6.5895902e-11 |
256000 | ---------- | ----------- | ---------- | ------------- | < - Rompe Stack
512000 | ---------- | ----------- | ---------- | ------------- |
                                  cte ~ 2.1e-09


  (n)  |   Randome   |    t(n)/n^2    |   t(n)/n^2.3   |    t(n)/n^2.6   |  
----------------------------------------------------------------------------
2000   | 0.015625    | 3.90625e-09    | 3.99439524e-10 | 4.084529502e-11 |
4000   | 0.09375     | 5.859375e-09   | 4.86668566e-10 | 4.042176742e-11 |
8000   | 0.359375    | 5.61523437e-09 | 3.78826971e-10 | 2.555723673e-11 |
16000  | 1.71875     | 6.71386718e-09 | 3.67905898e-10 | 2.016047481e-11 |
32000  | 8.328125    | 8.13293457e-09 | 3.61994760e-10 | 1.611229079e-11 |
64000  | 43.84375    | 1.07040405e-08 | 3.86984662e-10 | 1.399071018e-11 |
128000 | 250.140625  | 1.52673721e-08 | 4.48333612e-10 | 1.316552886e-11 |
256000 | ----------- | -------------- | -------------- | --------------- | < - Rompe Stack
512000 | ----------- | -------------- | -------------- | --------------- |
                                        cte ~ 3.67e-10
  ->

- isort_t 

  (n)  |    ->     |    t(n)/n^2    |   t(n)/n^2.3   |    t(n)/n^2.6    |
--------------------------------------------------------------------------
2000   | 0.046875  | 1.171875e-08   | 1.19831857e-09 | 1.2253588506e-10 |
4000   | 0.234375  | 1.46484375e-08 | 1.21667141e-09 | 1.0105441856e-10 |
8000   | 1.        | 1.5625e-08     | 1.05412722e-09 | 7.1115789180e-11 |
16000  | 4.875     | 1.90429687e-08 | 1.04351491e-09 | 5.7182437652e-11 |
32000  | 26.296875 | 2.56805419e-08 | 1.14303411e-09 | 5.0876145227e-11 | 
64000  | 132.875   | 3.2440185e-08  | 1.17281452e-09 | 4.2400926376e-11 |
128000 | 612.17187 | 3.7364006e-08  | 1.09721173e-09 | 3.2220142129e-11 |
256000 |   + 1h    |        /       |        /       |         /        |
512000 |     /     |        /       |        /       |         /        |
                                      cte ~ 2.1 e-09

  (n)  |  Randome  |   t(n)/n^2   |   t(n)/n^2.3   |    t(n)/n^2.6   |
------------------------------------------------------------------------
2000   | 0.046875  | 1.171875e-08 | 1.19831857e-09 | 1.225358850e-10 |
4000   | 0.203125  | 1.269531e-08 | 1.05444856e-09 | 8.758049608e-11 |
8000   | 0.890625  | 1.391601e-08 | 9.38832059e-10 | 6.333749973e-11 |
16000  | 4.4375    | 1.733398e-08 | 9.49866138e-10 | 5.205068042e-11 |
32000  | 23.796875 | 2.323913e-08 | 1.03436776e-09 | 4.603943504e-11 |
64000  | 121.14062 | 2.957534e-08 | 1.06924165e-09 | 3.865644193e-11 |
128000 | 580.85937 | 3.545284e-08 | 1.04108951e-09 | 3.057208667e-11 |
256000 |     /     |      /       |       /        |        /        |
512000 |     /     |      /       |       /        |        /        |
                                    cte ~ 1e-09

- msort

  (n)  |     ->     |     t(n)/n    |    t(n)/n^1.2   |   t(n)/n^1.4    |
-------------------------------------------------------------------------
2000   | 0.0009375  | 4.6874999e-07 | 1.025026944e-07 | 2.241451171e-08 |
4000   | 0.00203125 | 5.0781250e-07 | 9.666992657e-08 | 1.840260864e-08 |
8000   | 0.00484375 | 6.0546875e-07 | 1.003399165e-07 | 1.662860197e-08 |
16000  | 0.01125    | 7.0312499e-07 | 1.014398371e-07 | 1.463472434e-08 |
32000  | 0.02515625 | 7.8613281e-07 | 9.873381725e-08 | 1.240040679e-08 |
64000  | 0.06       | 9.3749999e-07 | 1.025026944e-07 | 1.120725585e-08 |
128000 | ---------- | ------------- | --------------- | --------------- | < - Rompe Stack
256000 | ---------- | ------------- | --------------- | --------------- |
512000 | ---------- | ------------- | --------------- | --------------- |
                                      cte ~ 1e-07

  (n)  |  Randome   |    t(n)/n    |   t(n)/n^1.2   |    t(n)/n^1.4   |
------------------------------------------------------------------------
2000   | 0.00109375 | 5.468750e-07 | 1.19586476e-07 | 2.615026366e-08 |
4000   | 0.00234375 | 5.859375e-07 | 1.11542222e-07 | 2.123377920e-08 |
8000   | 0.0053125  | 6.640625e-07 | 1.10050231e-07 | 1.823782151e-08 |
16000  | 0.0121875  | 7.617187e-07 | 1.09893156e-07 | 1.585428471e-08 |
32000  | 0.028125   | 8.789062e-07 | 1.10385634e-07 | 1.386380883e-08 |
64000  | 0.0653125  | 1.020507e-08 | 1.11578453e-07 | 1.219956496e-08 |
128000 | ---------- | ------------ | -------------- | --------------- |  < - Rompe Stack
256000 | ---------- | ------------ | -------------- | --------------- |
512000 | ---------- | ------------ | -------------- | --------------- |
                                     cte ~ 1.1e-07

msort_qt 

  (n)  |     ->     |     t(n)/n    |    t(n)/n^1.2    |  t(n)/n^1.4    |
-------------------------------------------------------------------------
2000   | 0.00140625 | 7.0312499e-07 | 1.5375404164e-07 | 3.36217675e-08 |
4000   | 0.00328125 | 8.2031249e-07 | 1.5615911216e-07 | 2.97272908e-08 |
8000   | 0.00734375 | 9.1796875e-07 | 1.5212826056e-07 | 2.52111062e-08 |
16000  | 0.0165625  | 1.0351562e-06 | 1.4934198244e-07 | 2.15455664e-08 |
32000  | 0.03703125 | 1.1572265e-06 | 1.4534108502e-07 | 1.82540149e-08 |
64000  | 0.08515625 | 1.3305664e-06 | 1.4547908454e-07 | 1.59061313e-08 |
128000 | 0.18984375 | 1.4831542e-06 | 1.4117062594e-07 | 1.34370009e-08 |
256000 | 0.43734375 | 1.7083740e-06 | 1.4155817862e-07 | 1.17297018e-08 |
512000 | 0.99328125 | 1.9400024e-06 | 1.3994206698e-07 | 1.00947203e-08 |
                                      cte. ~1.4e-07

 (n)  |  Randome   |   t(n)/n^1.1  |   t(n)/n^1.2   |    t(n)/n^1.4   |
------------------------------------------------------------------------
2000   | 0.00140625 | 1.537540e-07 | 1.53754041e-07 | 7.189911439e-08 |
4000   | 0.00359375 | 1.710314e-07 | 1.71031408e-07 | 7.462251351e-08 |
8000   | 0.0078125  | 1.618385e-07 | 1.61838575e-07 | 6.588295154e-08 |
16000  | 0.01703125 | 1.535686e-07 | 1.53568642e-07 | 5.832980794e-08 |
32000  | 0.0384375  | 1.508603e-07 | 1.50860366e-07 | 5.346384158e-08 |
64000  | 0.0878125  | 1.500169e-07 | 1.50016964e-07 | 4.960464836e-08 |
128000 | 0.200625   | 1.491877e-07 | 1.49187723e-07 | 4.602693856e-08 |  
256000 | 0.45046875 | 1.458064e-07 | 1.45806441e-07 | 4.197132826e-08 |
512000 | 1.01796875 | 1.434202e-07 | 1.43420255e-07 | 3.851975328e-08 |
                                     cte. ~1.5e-07 

qsort 

  (n)  |     ->    |    t(n)/n^1.4    |    t(n)/n^1.9    |     t(n)/n^2.4    |
------------------------------------------------------------------------------
2000   | 0.390625  | 9.3393798807e-06 | 2.0883488281e-07 | 4.66968994038e-09 |
4000   | 2.        | 1.8119491591e-05 | 2.8649431737e-07 | 4.52987289798e-09 |
8000   | 7.125     | 2.4460137097e-05 | 2.7347264643e-07 | 3.05751713713e-09 | 
16000  | 29.59375  | 3.8497455439e-05 | 3.0434910827e-07 | 2.40609096499e-09 |
32000  | 85.96875  | 4.2377042350e-05 | 2.3689486845e-07 | 1.32428257344e-09 |
64000  |     /     |        /         |        /         |         /         |
128000 |     /     |        /         |        /         |         /         |
256000 |     /     |        /         |        /         |         /         |
512000 |     /     |        /         |        /         |         /         |


  (n)  |  Randome  |    t(n)/n^0.9    |    t(n)/n^1.2    |     t(n)/n^1.9    |
------------------------------------------------------------------------------
2000   | 0.0015625 | 1.6706790624e-06 | 1.7083782405e-07 | 4.66968994038e-09 |
4000   | 0.0046875 | 2.6858842253e-06 | 2.2308444594e-07 | 4.52987289798e-09 |
8000   | 0.0109375 | 3.3584360089e-06 | 2.2657400509e-07 | 3.05751713713e-09 | 
16000  | 0.01875   | 3.0852707914e-06 | 1.6906639522e-07 | 2.40609096499e-09 |
32000  | 0.0625    | 5.5111855982e-06 | 2.4530140932e-07 | 1.32428257344e-09 |
64000  | 0.125     |        /         |        /         |         /         |
128000 | 0.40625   |        /         |        /         |         /         |
256000 | 0.984375  |        /         |        /         |         /         |
512000 |     /     |        /         |        /         |         /         | <- rompe El stack


qsort_qt 


  (n)  |     ->    |    t(n)/n^1.4    |    t(n)/n^1.9    |     t(n)/n^2.4    |
------------------------------------------------------------------------------
2000   | 0.390625  | 9.3393798807e-06 | 2.0883488281e-07 | 4.66968994038e-09 |
4000   | 2.        | 1.8119491591e-05 | 2.8649431737e-07 | 4.52987289798e-09 |
8000   | 7.125     | 2.4460137097e-05 | 2.7347264643e-07 | 3.05751713713e-09 | 
16000  | 29.59375  | 3.8497455439e-05 | 3.0434910827e-07 | 2.40609096499e-09 |
32000  | 85.96875  | 4.2377042350e-05 | 2.3689486845e-07 | 1.32428257344e-09 |
64000  |     /     |        /         |        /         |         /         |
128000 |     /     |        /         |        /         |         /         |
256000 |     /     |        /         |        /         |         /         |
512000 |     /     |        /         |        /         |         /         |


  (n)  |  Randome   |  t(n)/n^1.1  |   t(n)/n^1.2   |  t(n)/n^1.3    |
---------------------------------------------------------------------
2000   | 0.0009375  | 2.191988e-07 | 1.02502694e-07 | 4.79327429e-08 |
4000   | 0.0020312  | 2.215630e-07 | 9.66699265e-08 | 4.21779424e-08 |
8000   | 0.0046875  | 2.385296e-07 | 9.71031450e-08 | 3.95297709e-08 |
16000  | 0.01203125 | 2.856135e-07 | 1.08484270e-07 | 4.12054606e-08 |
32000  | 0.02640625 | 2.924433e-07 | 1.03639845e-07 | 3.67292245e-08 |
64000  | 0.05390625 | 2.785102e-07 | 9.20922645e-07 | 3.04512521e-08 |
128000 | 0.120625   | 2.907410e-07 | 8.96985376e-07 | 2.76735175e-08 |
256000 |     /      |       /      |       /        |       /        |
512000 |     /      |       /      |       /        |       /        |


Conclusiones:
    
    La ventaja de implementar una versión terminal de estos algoritmos es poder gestionar vectores de gran tamaño sin
    que rompa el stack, tiene la contrapartida de que la versión terminal puede ser más lenta y en algunos casos el 
    algoritmo divide el vector en subvectores creando un arbol de recurrencias siendo inecesaria la terminalidad.

    Tras estudiar el comportamiento de los algoritmos se ha podido apreciar que el algoritmo merge sort
    tiene una complegidad computacional de n^1.2 que es equivalente a la complegidad tehórica nlong(n), tanto en su versión 
    terminal como no terminal. El algoritmo qusort es el siguiente algoritmo en orden de rapidez siendo más rapido con vectores randome O(n^1.2)
    que con vectores ordenados ascendentemente O(n^1.9)(casi tiempos cuadráticos), el stack rompe para vectores de entre 256000 y 512000 elementos 
    para la version no terminal. El algoritmo isort es el algoritmo más lento de los tres, tiene complegidad cuadrática O(n^2) para vectores randome
    y lineal O(n) para vectores ordenados, la complegidad obtenida empíricamente en este caso ha sido de O(2^3) y O(n^1.3) para la versión no terminal
    y de O(n^2.3) para la version terminal tanto para vectores ordenados como para vectores randome.

    Herramientas:


    let crono_k f x k =
      let rec aux = function
          1 -> f x
        | c -> f x; aux (c - 1)
      in let t = Sys.time() in let _ = aux k in (Sys.time() -. t) /. float_of_int k;;
      
    let crono_fix_k k = 
      let rec aux = function
          1 -> 1
        | c -> aux (c - 1)
      in let t = Sys.time() in let _ = aux k in (Sys.time() -. t) /. float_of_int k;;

    let crono_time_k f x k = let t1 = crono_k f x k in let t2 = crono_fix_k k in t1 -. t2;;

    let medirTiempo_ k initf f m n =
      let l = initf m n in
        let tiempo = crono_time_k f l k in tiempo;;

    let listMap f l = 
      let rec aux s = function
          [] -> s
        | h::t -> aux ((f h)::s) t
      in aux [] (List.rev l);;

    let map2 f l1 l2 = 
      if(List.length l1 != List.length l2) then 
        raise (Invalid_argument("Tamaño invalido"))
      else 
      let rec aux res s1 s2 =
      match (s1,s2) with
      | ([],[]) -> res
      | ([],_) -> raise (Invalid_argument("Tamaño invalido l1"))
      | (_,[]) -> raise (Invalid_argument("Tamaño invalido l2"))
      | (h::t, hh::tt) -> aux ((f h hh)::res) t tt
    in aux [] l1 l2;;

    let cota f lt ln=
      let l_2n = listMap f ln in 
        List.map2 (/.) lt l_2n;;

Ejemplo:
  - Para vector ordenado:
      let tiempos2 = listMap (medirTiempo_ 1 (fromTo) (qsort_qt) 0) list_t;;
  
  - Para vector randome:
      let tiempos = map2 (medirTiempo_ 1 (rlist_t) (isort_t)) list_t list_t;;

  - Calaculo de cotas:
      let result = cota ( fun n -> n**2.) tiempos2 n ;;